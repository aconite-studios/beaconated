plugins {
	id 'fabric-loom' version '1.6-SNAPSHOT'
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	// Modrinth
	maven { url "https://api.modrinth.com/maven" }

	// Veil
	maven { url "https://maven.blamejared.com/" }
	maven {
		name = "TerraformersMC"
		url = "https://maven.terraformersmc.com/"
	}
	maven {
		name = "Ladysnake Libs"
		url = 'https://maven.ladysnake.org/releases'
	}
	maven {
		url = "https://maven.jamieswhiteshirt.com/libs-release"
	}
	maven {
		url = 'https://jitpack.io'
	}
	maven {
		url "https://cursemaven.com"
	}
	maven {
		url = 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
	}
		maven {
			name = "willBlRepositoryReleases"
			url = "https://maven.willbl.dev/releases"
		}

	// CCA
	maven {
		name = 'Ladysnake Mods'
		url = 'https://maven.ladysnake.org/releases'
	}

	// Portinglib (for Lodestone Fabric)
	maven { url "https://mvn.devos.one/snapshots/" 	}
	maven { url "https://mvn.devos.one/releases/" 	}
}

loom {
	accessWidenerPath = file("src/main/resources/beaconated.accesswidener")
    runs {
		datagen {
			inherit server
			name "Data Generation"
			vmArg "-Dfabric-api.datagen"
			vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
			vmArg "-Dfabric-api.datagen.modid=beaconated"
 
			runDir "build/datagen"
		}
	}
}

sourceSets {
	main {
		resources {
			srcDirs += [
					'src/main/generated'
			]
		}
	}
}
dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	include modImplementation("com.jamieswhiteshirt:reach-entity-attributes:2.4.0")

	modApi include("dev.emi:trinkets:3.7.2")
	modApi include("xyz.amymialee:mialib:${mialib_version}")

	modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-base:${project.cca_version}"
	// Adds a dependency on a specific module
	modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-world:${project.cca_version}"
	modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${project.cca_version}"
	// Includes Cardinal Components API as a Jar-in-Jar dependency (optional)
	include "dev.onyxstudios.cardinal-components-api:cardinal-components-base:${project.cca_version}"
	include "dev.onyxstudios.cardinal-components-api:cardinal-components-world:${project.cca_version}"
	include "dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${project.cca_version}"

	// midnightlib
	modImplementation "maven.modrinth:midnightlib:${project.midnightlib_version}"
	include "maven.modrinth:midnightlib:${project.midnightlib_version}"

	// satin
	modImplementation "maven.modrinth:satin-api:${project.satin_version}"
	include "maven.modrinth:satin-api:${project.satin_version}"

	// lodestone
	modImplementation "team.lodestar.lodestone:lodestone:${project.lodestone_version}"
	include "team.lodestar.lodestone:lodestone:${project.lodestone_version}"
	for (String module in portinglib_modules.split(",")) {
		include "io.github.fabricators_of_create.Porting-Lib:$module:${project.portinglib_version}"
		modImplementation "io.github.fabricators_of_create.Porting-Lib:$module:${project.portinglib_version}"
	}
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {

	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}


publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}
}